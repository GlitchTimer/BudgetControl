from flask import g
import sqlite3
from hmac import compare_digest
from token_generation import get_token
from validators.table_name import table_name_validator


class FDataBase:
    def __init__(self, db):
        self.__db = db
        self.__cur = db.cursor()

    def token_verification(self, token: str):
        """
        search for a group by its token and return the id value of this group
        """
        try:
            self.__cur.execute("""SELECT id FROM Groups WHERE token = ?""", (token,))
            res = self.__cur.fetchone()
            if res:
                return res[0]
        except sqlite3.Error as e:
            print(str(e))

    def get_salt_by_username(self, username: str):
        try:
            self.__cur.execute("""SELECT psw_salt FROM Users WHERE username = ?""", (username,))
            res = self.__cur.fetchone()
            if res:
                return str(res[0])
        except sqlite3.Error as e:
            print(str(e))

        return False

    def user_exist_by_tg_link(self, tg_link: str):
        """
        :param tg_link:
        :return:
        """
        try:
            self.__cur.execute("""SELECT id FROM Users WHERE telegram_link = ?""", (tg_link,))
            res = self.__cur.fetchone()
            if res:  # res[0] = None if the user with this link does not exist
                return True
        except sqlite3.Error as e:
            print(str(e))

        return False

    def auth_by_username(self, username: str, psw_hash: str, token: str):
        """
        full process of user confirmation during authorization.
        the whole process is initialized with the username
        """
        # The first stage of verification: using username, we verify the password and get the user's group id
        try:
            self.__cur.execute("""SELECT password_hash, group_id FROM Users WHERE username = ?""", (username,))
            res = self.__cur.fetchall()
            if res:  # if data for such username exists
                psw, group = res[0]  # get password_hash Ð¸ group_id from database
                if compare_digest(psw, psw_hash):  # if the password matches / safe string comparison
                    psw = "EMPTY"  # overwriting a variable for safety

                    # The second stage of verification: we verify the token by the group id
                    try:
                        self.__cur.execute("""SELECT token FROM Groups WHERE id = ?""", (group,))
                        res = self.__cur.fetchone()
                        if res:
                            if compare_digest(res[0], token):  # safe string comparison
                                return True  # if the token matches the group token
                    except sqlite3.Error as e:
                        print(str(e))

        except sqlite3.Error as e:
            print(str(e))

    def add_user_to_db(self, username: str, psw_salt: str, psw_hash: str, group_id: int, tg_link: str):
        """
        adding a new user to the Users table
        """
        try:
            self.__cur.execute("INSERT INTO Users "
                               "VALUES(NULL, ?, ?, ?, ?, ?, strftime('%d-%m-%Y %H:%M:%S', 'now', 'localtime'))",
                               (username, psw_salt, psw_hash, group_id, tg_link,))
            self.__db.commit()

        except sqlite3.Error as e:
            print(str(e))
            return False

        return True

    def create_group(self, owner: str) -> str | bool:
        """
        creating a new group in the Groups table
        :param owner: link to the telegram of the user who initiates the creation of the group
        :return: token generated by external function (returns False in case of error)
        """
        try:
            token = get_token()
            self.__cur.execute("INSERT INTO Groups VALUES(NULL, ?, ?)", (owner, token,))
            self.__db.commit()

        except sqlite3.Error as e:
            print(str(e))
            return False

        return token

    def update_user_last_login(self, username: str) -> None:
        """
        changes the user's last login time in the last_login column in the Users table
        :param username:
        :return: None
        """
        try:
            self.__cur.execute("""UPDATE Users SET last_login = strftime('%d-%m-%Y %H:%M:%S', 'now', 'localtime') 
            WHERE username = ?""", (username,))
            self.__db.commit()

        except sqlite3.Error as e:
            print(str(e))


def connect_db():
    try:
        conn = sqlite3.connect("db.sqlite3")
        conn.row_factory = sqlite3.Row
        return conn

    except sqlite3.Error as e:
        print(str(e))


def create_db():
    try:
        conn = connect_db()
        cursor = conn.cursor()

        with open("create_db.sql", 'r') as file:
            cursor.executescript(file.read())

        conn.commit()
        conn.close()

    except sqlite3.Error as e:
        print(str(e))


def create_table_group(table_name) -> None:
    """
    table_name_validator -> to protect against sql injection, validation of the table_name parameter is needed
    :param table_name: "budget_?"
    :return: None
    """
    try:
        if not table_name_validator(table_name):
            raise ValueError("Possible SQL injection attempt")

        conn = sqlite3.connect("db.sqlite3")
        cursor = conn.cursor()

        query = (f"CREATE TABLE IF NOT EXISTS {table_name} (id integer PRIMARY KEY AUTOINCREMENT, "
                 f"total text NOT NULL, "
                 f"username text NOT NULL, "
                 f"transfer text NOT NULL, "
                 f"date_time text NOT NULL, "
                 f"description text NOT NULL);")
        cursor.execute(query)

        conn.commit()
        conn.close()

    except sqlite3.Error as e:
        print(str(e))

    except ValueError as e:
        print(str(e))

# def insert_data():
#     conn = create_connection()
#     cursor = conn.cursor()
#     cursor.execute("INSERT INTO table_name (column1, column2, ...) VALUES (?, ?)", ('value1', 'value2'))
#     conn.commit()
#     conn.close()


def get_db():
    if not hasattr(g, "link_db"):
        g.link_db = connect_db()
        print("Database connection: OK")
    return g.link_db


def close_db(error):
    if hasattr(g, "link_db"):
        g.link_db.close()
        print("Database connection: CLOSED")


if __name__ == '__main__':
    pass
    # create_db()
    # create_table_group("budget_1")
